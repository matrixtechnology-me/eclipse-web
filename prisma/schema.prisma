generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EInstallmentStatus {
  FULLY_PAID     @map(name: "fully-paid")
  PENDING        @map(name: "pending")
  NON_PAID       @map(name: "non-paid")
  PARTIALLY_PAID @map(name: "partially-paid")
}

enum EPeriod {
  DAILY   @map(name: "daily")
  WEEKLY  @map(name: "weekly")
  MONTHLY @map(name: "monthly")
}

enum DocumentType {
  Cpf  @map(name: "cpf")
  Cnpj @map(name: "cnpj")
}

enum EMembershipRole {
  Owner @map(name: "owner")
}

enum EStockStrategy {
  Fifo @map(name: "fifo")
  Lifo @map(name: "lifo")
}

model Document {
  id        String       @id @default(uuid()) @db.Uuid
  type      DocumentType
  number    String
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("documents")
}

model Address {
  id           String   @id @default(uuid()) @db.Uuid
  street       String
  houseNumber  String   @map(name: "house_number")
  neighborhood String
  zipCode      String   @map(name: "zip_code")
  city         String
  state        String
  complement   String
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map("addresses")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Tenant {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @default("")
  active      Boolean? @default(true)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  memberships   TenantMembership[]
  customers     Customer[]
  products      Product[]
  sales         Sale[]
  receivables   Receivable[]
  notifications Notification[]
  stocks        Stock[]
  stockLots     StockLot[]
  payables      Payable[]

  @@map("tenants")
}

model Membership {
  id          String          @id @default(uuid()) @db.Uuid
  role        EMembershipRole
  permissions String[]
  active      Boolean?        @default(true)
  userId      String          @map("user_id")
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")

  tenant_memberships TenantMembership[]

  @@map("memberships")
}

model TenantMembership {
  membershipId String @map("membership_id") @db.Uuid
  tenantId     String @map("tenant_id") @db.Uuid

  membership Membership @relation(fields: [membershipId], references: [id])
  tenant     Tenant     @relation(fields: [tenantId], references: [id])

  @@id([membershipId, tenantId])
  @@map("tenant_memberships")
}

model Customer {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @default("")
  phoneNumber String   @map("phone_number")
  active      Boolean? @default(true)
  tenantId    String   @map("tenant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  receivables Receivable[]
  payables    Payable[]
  sale        Sale[]

  @@map("customers")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @default("")
  active      Boolean? @default(true)
  tenantId    String   @map("tenant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  saleProducts SaleProduct[]
  variations   ProductVariation[]

  @@map("products")
}

model ProductVariationSpecification {
  id               String   @id @default(uuid()) @db.Uuid
  label            String
  value            String
  productVariantId String   @map("product_variant_id") @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product ProductVariation @relation(fields: [productVariantId], references: [id])

  @@map("product_specification")
}

model ProductVariation {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  skuCode   String   @unique @map("sku_code")
  salePrice Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  stocks         Stock[]
  saleProducts   SaleProduct[]
  specifications ProductVariationSpecification[]

  @@map("product_variations")
}

model Stock {
  id                 String         @id @default(uuid()) @db.Uuid
  strategy           EStockStrategy
  productVariationId String         @unique @map("sku_id") @db.Uuid
  totalQty           Int            @default(0) @map("total_qty")
  availableQty       Int            @default(0) @map("available_qty")
  tenantId           String         @map("tenant_id") @db.Uuid
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime       @updatedAt @map(name: "updated_at")

  tenant           Tenant           @relation(fields: [tenantId], references: [id])
  productVariation ProductVariation @relation(fields: [productVariationId], references: [id])

  lots StockLot[]

  @@map("stocks")
}

model StockLot {
  id        String    @id @default(uuid()) @db.Uuid
  lotNumber String    @unique @map("lot_number")
  totalQty  Int       @default(0) @map("total_qty")
  costPrice Decimal   @default(0.00) @map("cost_price")
  stockId   String    @map("stock_id") @db.Uuid
  tenantId  String    @map("tenant_id") @db.Uuid
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  stock  Stock  @relation(fields: [stockId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("stock_lots")
}

model Sale {
  id         String   @id @default(uuid()) @db.Uuid
  status     String   @default("pending")
  customerId String   @map("customer_id") @db.Uuid
  tenantId   String   @map("tenant_id") @db.Uuid
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  products SaleProduct[]

  customer Customer @relation(fields: [customerId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("sales")
}

model SaleProduct {
  name               String
  description        String? @default("")
  costPrice          Float   @map("cost_price")
  salePrice          Float   @map("sale_price")
  totalQty           Int     @default(0) @map("total_qty")
  productVariationId String  @map("sku_id") @db.Uuid

  saleId    String @map("sale_id") @db.Uuid
  productId String @map("product_id") @db.Uuid

  sale             Sale             @relation(fields: [saleId], references: [id])
  product          Product          @relation(fields: [productId], references: [id])
  productVariation ProductVariation @relation(fields: [productVariationId], references: [id])

  @@id([saleId, productId])
  @@map("sale_products")
}

model Receivable {
  id         String   @id @default(uuid()) @db.Uuid
  status     String   @default("pending")
  startAt    DateTime @map("start_at")
  customerId String   @map("customer_id") @db.Uuid
  tenantId   String   @map("tenant_id") @db.Uuid
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  customer Customer @relation(fields: [customerId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("receivables")
}

model Payable {
  id         String   @id @default(uuid()) @db.Uuid
  status     String   @default("pending")
  startAt    DateTime @map("start_at")
  customerId String   @map("customer_id") @db.Uuid
  tenantId   String   @map("tenant_id") @db.Uuid
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  customer Customer @relation(fields: [customerId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("payables")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  subject   String
  body      String
  read      Boolean
  tenantId  String   @map("tenant_id") @db.Uuid
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("notifications")
}
