generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentType {
  Cpf  @map(name: "cpf")
  Cnpj @map(name: "cnpj")
}

enum EDiscountVariant {
  Percentage @map("percentage")
  Amount     @map("amount")
}

enum EInstallmentStatus {
  FULLY_PAID     @map(name: "fully-paid")
  PENDING        @map(name: "pending")
  NON_PAID       @map(name: "non-paid")
  PARTIALLY_PAID @map(name: "partially-paid")
}

enum EMembershipRole {
  Owner @map(name: "owner")
}

enum ENotificationTarget {
  User   @map(name: "user")
  Tenant @map(name: "tenant")
}

enum ENotificationTargetStatus {
  Read   @map(name: "read")
  Unread @map(name: "unread")
}

enum ENotificationType {
  Info     @map("info")
  Success  @map("success")
  Warning  @map("warning")
  Error    @map("error")
  System   @map("system")
  Message  @map("message")
  Reminder @map("reminder")
  Alert    @map("alert")
}

enum EPaymentMethod {
  Cash       @map(name: "cash")
  Pix        @map(name: "pix")
  CreditCard @map(name: "credit-card")
  DebitCard  @map(name: "debit-card")
}

enum EPaymentStatus {
  Paid    @map(name: "paid")
  Pending @map(name: "pending")
}

enum EPeriod {
  DAILY   @map(name: "daily")
  WEEKLY  @map(name: "weekly")
  MONTHLY @map(name: "monthly")
}

enum EPosEventStatus {
  Processed @map(name: "processed")
  Canceled  @map(name: "canceled")
}

enum EPosEventType {
  Sale     @map(name: "sale")
  Entry    @map(name: "entry")
  Output   @map(name: "output")
  Payment  @map(name: "payment")
  Return   @map(name: "return")
  Exchange @map(name: "exchange")
}

enum EPosStatus {
  Opened      @map(name: "opened")
  Closed      @map(name: "closed")
  UnderReview @map(name: "under-review")
}

enum ESaleMovementType {
  Payment    @map("payment")
  Change     @map("change")
  Refund     @map("refund")
  Withdrawal @map("withdrawal")
}

enum ESaleStatus {
  Processed @map(name: "processed")
  Canceled  @map(name: "canceled")
}

enum EStockEventType {
  Entry  @map("entry")
  Output @map("output")
}

enum EStockStrategy {
  Fifo @map(name: "fifo")
  Lifo @map(name: "lifo")
}

enum ProductionType {
  Own        @map(name: "own")
  Outsourced @map(name: "outsourced")
}

enum UnitOfMeasure {
  Unit        @map(name: "unit")
  Kilogram    @map(name: "kilogram")
  Gram        @map(name: "gram")
  Liter       @map(name: "liter")
  Milliliter  @map(name: "milliliter")
  Meter       @map(name: "meter")
  Centimeter  @map(name: "centimeter")
  SquareMeter @map(name: "square_meter")
  CubicMeter  @map(name: "cubic_meter")
}

model Address {
  id           String   @id @default(uuid()) @db.Uuid
  street       String
  houseNumber  String   @map(name: "house_number")
  neighborhood String
  zipCode      String   @map(name: "zip_code")
  city         String
  state        String
  complement   String
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map("addresses")
}

model Customer {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @default("")
  phoneNumber String?   @map("phone_number")
  active      Boolean?  @default(true)
  tenantId    String    @map("tenant_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  deletedAt   DateTime? @map(name: "deleted_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  sales         Sale[]
  posEventSales PosEventSale[]

  @@map("customers")
}

model Document {
  id        String       @id @default(uuid()) @db.Uuid
  type      DocumentType
  number    String
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("documents")
}

model File {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  size        BigInt
  mimeType    String   @map(name: "mime_type")
  key         String   @unique
  url         String
  folderId    String?  @map(name: "folder_id") @db.Uuid
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  folder            Folder?             @relation(fields: [folderId], references: [id])
  ProductAttachment ProductAttachment[]

  @@map("files")
}

model Folder {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  key         String   @unique
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  files File[]

  @@map("folders")
}

model Membership {
  id          String          @id @default(uuid()) @db.Uuid
  role        EMembershipRole
  permissions String[]
  active      Boolean?        @default(true)
  userId      String          @map("user_id") @db.Uuid
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])

  tenant_memberships TenantMembership[]

  @@map("memberships")
}

model Notification {
  id        String            @id @default(uuid()) @db.Uuid
  type      ENotificationType @default(Info)
  subject   String
  body      String
  href      String            @default("#")
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @updatedAt @map(name: "updated_at")
  deletedAt DateTime          @updatedAt @map(name: "deleted_at")

  targets NotificationTarget[]

  @@map("notifications")
}

model NotificationTarget {
  id     String                    @id @default(uuid()) @db.Uuid
  status ENotificationTargetStatus @default(Unread)

  notificationId String @map("notification_id") @db.Uuid
  userId         String @map("user_id") @db.Uuid
  tenantId       String @map("tenant_id") @db.Uuid

  notification Notification @relation(fields: [notificationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  tenant       Tenant       @relation(fields: [tenantId], references: [id])

  @@unique([notificationId, userId, tenantId])
  @@map("notification_targets")
}

model Pos {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String     @default("")
  status      EPosStatus @default(Opened)
  tenantId    String     @map("tenant_id") @db.Uuid
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
  deletedAt   DateTime?  @map(name: "deleted_at")

  @@map("pos")
}

model PosEvent {
  id        String          @id @default(uuid()) @db.Uuid
  type      EPosEventType
  status    EPosEventStatus @default(Processed)
  posId     String          @map("pos_id") @db.Uuid
  createdAt DateTime        @default(now()) @map(name: "created_at")
  updatedAt DateTime        @updatedAt @map(name: "updated_at")
  deletedAt DateTime?       @map(name: "deleted_at")

  entry  PosEventEntry?
  output PosEventOutput?
  sale   PosEventSale?

  @@map("pos_events")
}

model PosEventEntry {
  id          String  @id @db.Uuid
  amount      Decimal @db.Decimal(19, 6)
  description String  @default("")

  posEvent PosEvent @relation(fields: [id], references: [id])

  @@map("pos_event_entries")
}

model PosEventOutput {
  id          String  @id @db.Uuid
  amount      Decimal @db.Decimal(19, 6)
  description String  @default("")

  posEvent PosEvent @relation(fields: [id], references: [id])

  @@map("pos_event_outputs")
}

model PosEventSale {
  id              String           @id @db.Uuid
  description     String           @default("")
  amount          Decimal          @db.Decimal(19, 6)
  discountVariant EDiscountVariant @default(Percentage) @map("discount_variant")
  discountValue   Float            @default(0) @map("discount_value")
  customerId      String           @map("customer_id") @db.Uuid
  saleId          String           @map("sale_id") @db.Uuid

  sale     Sale     @relation(fields: [saleId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  posEvent PosEvent @relation(fields: [id], references: [id])

  products  PosEventSaleProduct[]
  movements PosEventSaleMovement[]

  @@map("pos_event_sales")
}

model PosEventSaleMovement {
  id        String            @id @default(uuid()) @db.Uuid
  type      ESaleMovementType
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @updatedAt @map(name: "updated_at")

  posEventSaleId String @map("pos_event_sale_id") @db.Uuid

  posEventSale PosEventSale @relation(fields: [posEventSaleId], references: [id])

  payment PosEventSaleMovementPayment?
  change  PosEventSaleMovementChange?

  @@map("pos_event_sale_movements")
}

model PosEventSaleMovementChange {
  id        String         @id @db.Uuid
  method    EPaymentMethod
  amount    Decimal        @db.Decimal(19, 6)
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")

  posEventSaleMovement PosEventSaleMovement @relation(fields: [id], references: [id])

  @@map("pos_event_sale_movement_changes")
}

model PosEventSaleMovementPayment {
  id        String         @id @db.Uuid
  method    EPaymentMethod
  amount    Decimal        @db.Decimal(19, 6)
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")

  posEventSaleMovement PosEventSaleMovement @relation(fields: [id], references: [id])

  @@map("pos_event_sale_movement_payments")
}

model PosEventSaleProduct {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  salePrice   Decimal  @map("sale_price") @db.Decimal(19, 6)
  totalQty    Int      @default(0) @map("total_qty")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  productId      String @map("product_id") @db.Uuid
  posEventSaleId String @map("pos_event_sale_id") @db.Uuid

  posEventSale PosEventSale @relation(fields: [posEventSaleId], references: [id])
  product      Product      @relation(fields: [productId], references: [id])

  @@map("pos_event_sale_products")
}

model Product {
  id             String         @id @default(uuid()) @db.Uuid
  name           String
  description    String         @default("")
  barCode        String         @unique @map(name: "bar_code")
  internalCode   String         @unique @map(name: "internal_code")
  unitOfMeasure  UnitOfMeasure  @default(Unit) @map(name: "unit_of_measure")
  productionType ProductionType @default(Outsourced) @map(name: "production_type")
  active         Boolean        @default(true)
  public         Boolean        @default(true)
  skuCode        String         @unique @map(name: "sku_code")
  categoryId     String?        @map(name: "category_id") @db.Uuid
  subcategoryId  String?        @map(name: "subcategory_id") @db.Uuid
  tenantId       String         @map(name: "tenant_id") @db.Uuid
  salePrice      Decimal        @map(name: "sale_price") @db.Decimal(19, 6)
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  updatedAt      DateTime       @updatedAt @map(name: "updated_at")
  deletedAt      DateTime?      @map(name: "deleted_at")

  stock       Stock?
  tenant      Tenant              @relation(fields: [tenantId], references: [id])
  category    ProductCategory?    @relation(fields: [categoryId], references: [id])
  subcategory ProductSubcategory? @relation(fields: [subcategoryId], references: [id])

  saleProducts         SaleProduct[]
  specifications       ProductSpecification[]
  posEventSaleProducts PosEventSaleProduct[]
  productAttachments   ProductAttachment[]
  parentCompositions   ProductComposition[]   @relation(name: "ParentProductComposition")
  childCompositions    ProductComposition[]   @relation(name: "ChildProductComposition")

  @@map("products")
}

model ProductAttachment {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map(name: "product_id") @db.Uuid
  fileId    String   @map(name: "file_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
  file    File    @relation(fields: [fileId], references: [id])

  @@unique([productId, fileId])
  @@map("product_attachments")
}

model ProductCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  tenantId    String   @map("tenant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products                     Product[]
  productCategorySubcategories ProductCategorySubcategory[]

  @@map("product_categories")
}

model ProductCategorySubcategory {
  categoryId    String @map("category_id") @db.Uuid
  subcategoryId String @map("subcategory_id") @db.Uuid

  category    ProductCategory    @relation(fields: [categoryId], references: [id])
  subcategory ProductSubcategory @relation(fields: [subcategoryId], references: [id])

  @@id([categoryId, subcategoryId])
  @@map("product_category_subcategories")
}

model ProductComposition {
  id        String   @id @default(uuid()) @db.Uuid
  totalQty  Decimal  @default(0) @map("total_qty") @db.Decimal(10, 2)
  parentId  String   @map("parent_id") @db.Uuid
  childId   String   @map("child_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(name: "ParentProductComposition", fields: [parentId], references: [id])
  child   Product @relation(name: "ChildProductComposition", fields: [childId], references: [id])

  @@map("product_compositions")
}

model ProductSpecification {
  id        String   @id @default(uuid()) @db.Uuid
  label     String
  value     String
  productId String   @map("product_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("product_specifications")
}

model ProductSubcategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  tenantId    String   @map("tenant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products                   Product[]
  productCategorySubcategory ProductCategorySubcategory[]

  @@map("product_subcategories")
}

model Sale {
  id              String           @id @default(uuid()) @db.Uuid
  status          ESaleStatus      @default(Processed)
  internalCode    String           @unique @map("internal_code")
  customerId      String           @map("customer_id") @db.Uuid
  tenantId        String           @map("tenant_id") @db.Uuid
  discountVariant EDiscountVariant @default(Percentage) @map("discount_variant")
  discountValue   Float            @default(0) @map("discount_value")
  paidTotal       Decimal          @map("paid_total") @db.Decimal(19, 6)
  estimatedTotal  Decimal          @map("estimated_total") @db.Decimal(19, 6)
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
  deletedAt       DateTime?        @map(name: "deleted_at")

  products  SaleProduct[]
  movements SaleMovement[]

  customer     Customer       @relation(fields: [customerId], references: [id])
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  PosEventSale PosEventSale[]

  @@map("sales")
}

model SaleMovement {
  id        String            @id @default(uuid()) @db.Uuid
  type      ESaleMovementType
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @updatedAt @map(name: "updated_at")

  saleId String @map("sale_id") @db.Uuid

  sale Sale @relation(fields: [saleId], references: [id])

  payment SaleMovementPayment?
  change  SaleMovementChange?

  @@map("sale_movements")
}

model SaleMovementChange {
  id        String         @id @db.Uuid
  method    EPaymentMethod
  amount    Decimal        @db.Decimal(19, 6)
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")

  saleMovement SaleMovement @relation(fields: [id], references: [id])

  @@map("sale_movement_changes")
}

model SaleMovementPayment {
  id        String         @id @db.Uuid
  method    EPaymentMethod
  amount    Decimal        @db.Decimal(19, 6)
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")

  saleMovement SaleMovement @relation(fields: [id], references: [id])

  @@map("sale_movement_payments")
}

model SaleProduct {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  salePrice   Decimal  @map("sale_price") @db.Decimal(19, 6)
  totalQty    Int      @default(0) @map("total_qty")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  saleId    String @map("sale_id") @db.Uuid
  productId String @map("product_id") @db.Uuid

  stockLotUsages StockLotUsage[]

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([saleId, productId])
  @@map("sale_products")
}

model Stock {
  id           String         @id @default(uuid()) @db.Uuid
  strategy     EStockStrategy
  productId    String         @unique @map("product_id") @db.Uuid
  totalQty     Int            @default(0) @map("total_qty")
  availableQty Int            @default(0) @map("available_qty")
  tenantId     String         @map("tenant_id") @db.Uuid
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @updatedAt @map(name: "updated_at")

  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  lots       StockLot[]
  StockEvent StockEvent[]

  @@map("stocks")
}

model StockEvent {
  id          String          @id @default(uuid()) @db.Uuid
  type        EStockEventType
  stockId     String          @map("stock_id") @db.Uuid
  tenantId    String          @map("tenant_id") @db.Uuid
  description String          @default("")
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")

  stock  Stock  @relation(fields: [stockId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  entry      StockEventEntry?
  output     StockEventOutput?
  StockLot   StockLot?         @relation(fields: [stockLotId], references: [id])
  stockLotId String?           @db.Uuid

  @@map("stock_events")
}

model StockEventEntry {
  id          String @id @default(uuid()) @db.Uuid
  quantity    Int
  description String @default("")

  stockEvent StockEvent @relation(fields: [id], references: [id])

  @@map("stock_event_entries")
}

model StockEventOutput {
  id          String @id @default(uuid()) @db.Uuid
  quantity    Int
  description String @default("")

  stockEvent StockEvent @relation(fields: [id], references: [id])

  @@map("stock_event_outputs")
}

model StockLot {
  id        String    @id @default(uuid()) @db.Uuid
  lotNumber String    @unique @map("lot_number")
  totalQty  Int       @default(0) @map("total_qty")
  costPrice Decimal   @default(0.00) @map("cost_price") @db.Decimal(19, 6)
  stockId   String    @map("stock_id") @db.Uuid
  tenantId  String    @map("tenant_id") @db.Uuid
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  stock  Stock  @relation(fields: [stockId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  stockEvents    StockEvent[]
  stockLotUsages StockLotUsage[]

  @@map("stock_lots")
}

model StockLotUsage {
  id            String @id @default(uuid()) @db.Uuid
  quantity      Int
  stockLotId    String @map("stock_lot_id") @db.Uuid
  saleProductId String @map("sale_product_id") @db.Uuid

  stockLot    StockLot    @relation(fields: [stockLotId], references: [id])
  saleProduct SaleProduct @relation(fields: [saleProductId], references: [id])

  @@map("stock_lot_usages")
}

model Tenant {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @default("")
  active      Boolean? @default(true)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  memberships TenantMembership[]
  customers   Customer[]
  products    Product[]
  sales       Sale[]
  stocks      Stock[]
  stockLots   StockLot[]
  StockEvent  StockEvent[]

  NotificationTarget NotificationTarget[]
  UserTenantSettings UserTenantSettings[]

  @@map("tenants")
}

model TenantMembership {
  membershipId String @map("membership_id") @db.Uuid
  tenantId     String @map("tenant_id") @db.Uuid

  membership Membership @relation(fields: [membershipId], references: [id])
  tenant     Tenant     @relation(fields: [tenantId], references: [id])

  @@id([membershipId, tenantId])
  @@map("tenant_memberships")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  email       String   @unique
  password    String
  role        String
  active      Boolean  @default(true)
  firstAccess Boolean  @default(true) @map("first_access")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  tenantSettings UserTenantSettings[]

  NotificationTarget NotificationTarget[]
  memberships        Membership[]
  Session            Session[]

  @@map("users")
}

model UserTenantSettings {
  doNotDisturb Boolean @default(false) @map("do_not_disturb")

  userId   String @map("user_id") @db.Uuid
  tenantId String @map("tenant_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId])
  @@map("user_tenant_settings")
}

enum ESessionType {
  Login             @map(name: "login")
  PasswordRecovery  @map(name: "password-recovery")
  EmailVerification @map(name: "email-verification")
  MfaVerification   @map(name: "mfa-verification")
}

model Session {
  id          String       @id @default(uuid()) @db.Uuid
  fingerprint String
  type        ESessionType @default(Login)
  ipAddress   String?      @map("ip_address")
  userAgent   String?      @map("user_agent")
  revokedAt   DateTime?    @map("revoked_at")
  expiresAt   DateTime     @map("expires_at")
  userId      String       @db.Uuid
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])

  verificationCodes VerificationCode[]

  @@map("sessions")
}

model VerificationCode {
  id        String   @id @default(uuid()) @db.Uuid
  value     String   @unique
  sessionId String   @map(name: "session_id") @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  session Session @relation(fields: [sessionId], references: [id])

  @@map("verification_codes")
}
