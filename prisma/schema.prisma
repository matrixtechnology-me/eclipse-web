generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EInstallmentStatus {
  FULLY_PAID     @map(name: "fully-paid")
  PENDING        @map(name: "pending")
  NON_PAID       @map(name: "non-paid")
  PARTIALLY_PAID @map(name: "partially-paid")
}

enum EPeriod {
  DAILY   @map(name: "daily")
  WEEKLY  @map(name: "weekly")
  MONTHLY @map(name: "monthly")
}

enum DocumentType {
  Cpf  @map(name: "cpf")
  Cnpj @map(name: "cnpj")
}

enum EMembershipRole {
  Owner @map(name: "owner")
}

enum EStockStrategy {
  Fifo @map(name: "fifo")
  Lifo @map(name: "lifo")
}

enum ESaleMovementType {
  Payment @map(name: "payment")
}

enum EPosEventType {
  Sale     @map(name: "sale")
  Entry    @map(name: "entry")
  Output   @map(name: "output")
  Payment  @map(name: "payment")
  Return   @map(name: "return")
  Exchange @map(name: "exchange")
}

enum ESaleMovementPaymentMethod {
  Cash       @map(name: "cash")
  Pix        @map(name: "pix")
  CreditCard @map(name: "credit-card")
  DebitCard  @map(name: "debit-card")
}

model Document {
  id        String       @id @default(uuid()) @db.Uuid
  type      DocumentType
  number    String
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("documents")
}

enum EDiscountVariant {
  Percentage @map("percentage")
  Amount     @map("amount")
}

enum EStockEventType {
  Entry  @map("entry")
  Output @map("output")
}

model Address {
  id           String   @id @default(uuid()) @db.Uuid
  street       String
  houseNumber  String   @map(name: "house_number")
  neighborhood String
  zipCode      String   @map(name: "zip_code")
  city         String
  state        String
  complement   String
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map("addresses")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  role      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Tenant {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @default("")
  active      Boolean? @default(true)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  memberships   TenantMembership[]
  customers     Customer[]
  products      Product[]
  sales         Sale[]
  notifications Notification[]
  stocks        Stock[]
  stockLots     StockLot[]
  StockEvent    StockEvent[]

  @@map("tenants")
}

model Membership {
  id          String          @id @default(uuid()) @db.Uuid
  role        EMembershipRole
  permissions String[]
  active      Boolean?        @default(true)
  userId      String          @map("user_id")
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")

  tenant_memberships TenantMembership[]

  @@map("memberships")
}

model TenantMembership {
  membershipId String @map("membership_id") @db.Uuid
  tenantId     String @map("tenant_id") @db.Uuid

  membership Membership @relation(fields: [membershipId], references: [id])
  tenant     Tenant     @relation(fields: [tenantId], references: [id])

  @@id([membershipId, tenantId])
  @@map("tenant_memberships")
}

model Customer {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @default("")
  phoneNumber String   @map("phone_number")
  active      Boolean? @default(true)
  tenantId    String   @map("tenant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  sales         Sale[]
  posEventSales PosEventSale[]

  @@map("customers")
}

model ProductSpecification {
  id        String   @id @default(uuid()) @db.Uuid
  label     String
  value     String
  productId String   @map("product_id") @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("product_specification")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  barCode     String   @map("bar_code")
  active      Boolean  @default(true)
  skuCode     String   @unique @map("sku_code")
  tenantId    String   @db.Uuid
  salePrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stock  Stock?
  Tenant Tenant @relation(fields: [tenantId], references: [id])

  saleProducts        SaleProduct[]
  specifications      ProductSpecification[]
  PosEventSaleProduct PosEventSaleProduct[]

  @@map("products")
}

model Stock {
  id           String         @id @default(uuid()) @db.Uuid
  strategy     EStockStrategy
  productId    String         @unique @map("sku_id") @db.Uuid
  totalQty     Int            @default(0) @map("total_qty")
  availableQty Int            @default(0) @map("available_qty")
  tenantId     String         @map("tenant_id") @db.Uuid
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @updatedAt @map(name: "updated_at")

  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  lots       StockLot[]
  StockEvent StockEvent[]

  @@map("stocks")
}

model StockLot {
  id        String    @id @default(uuid()) @db.Uuid
  lotNumber String    @unique @map("lot_number")
  totalQty  Int       @default(0) @map("total_qty")
  costPrice Float     @default(0.00) @map("cost_price")
  stockId   String    @map("stock_id") @db.Uuid
  tenantId  String    @map("tenant_id") @db.Uuid
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  stock      Stock        @relation(fields: [stockId], references: [id])
  tenant     Tenant       @relation(fields: [tenantId], references: [id])
  StockEvent StockEvent[]

  @@map("stock_lots")
}

model StockEvent {
  id          String          @id @default(uuid()) @db.Uuid
  type        EStockEventType
  stockId     String          @map("stock_id") @db.Uuid
  tenantId    String          @map("tenant_id") @db.Uuid
  description String          @default("")
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")

  stock  Stock  @relation(fields: [stockId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  entry      StockEventEntry?
  output     StockEventOutput?
  StockLot   StockLot?         @relation(fields: [stockLotId], references: [id])
  stockLotId String?           @db.Uuid

  @@map("stock_events")
}

model StockEventEntry {
  id          String @id @default(uuid()) @db.Uuid
  quantity    Int
  description String @default("")

  stockEvent StockEvent @relation(fields: [id], references: [id])

  @@map("stock_event_entries")
}

model StockEventOutput {
  id          String @id @default(uuid()) @db.Uuid
  quantity    Int
  description String @default("")

  stockEvent StockEvent @relation(fields: [id], references: [id])

  @@map("stock_event_outputs")
}

model Pos {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  tenantId    String   @map("tenant_id") @db.Uuid
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@map("pos")
}

model PosEvent {
  id        String        @id @default(uuid()) @db.Uuid
  type      EPosEventType
  posId     String        @map("pos_id") @db.Uuid
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @updatedAt @map(name: "updated_at")

  entry  PosEventEntry?
  output PosEventOutput?
  sale   PosEventSale?

  @@map("pos_events")
}

model PosEventEntry {
  id          String @id @db.Uuid
  amount      Float
  description String @default("")

  posEvent PosEvent @relation(fields: [id], references: [id])

  @@map("pos_event_entries")
}

model PosEventOutput {
  id          String @id @db.Uuid
  amount      Float
  description String @default("")

  posEvent PosEvent @relation(fields: [id], references: [id])

  @@map("pos_event_outputs")
}

model PosEventSale {
  id              String           @id @db.Uuid
  description     String           @default("")
  amount          Float
  discountVariant EDiscountVariant @default(Percentage) @map("discount_variant")
  discountValue   Float            @default(0) @map("discount_value")
  customerId      String           @map("customer_id") @db.Uuid
  saleId          String           @map("sale_id") @db.Uuid

  sale     Sale                  @relation(fields: [saleId], references: [id])
  customer Customer              @relation(fields: [customerId], references: [id])
  posEvent PosEvent              @relation(fields: [id], references: [id])
  products PosEventSaleProduct[]

  @@map("pos_event_sales")
}

model PosEventSaleProduct {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  costPrice   Float    @map("cost_price")
  salePrice   Float    @map("sale_price")
  totalQty    Int      @default(0) @map("total_qty")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  productId String @map("product_id") @db.Uuid

  posEventSale PosEventSale @relation(fields: [id], references: [id])
  product      Product      @relation(fields: [productId], references: [id])

  @@map("pos_event_sale_products")
}

model Sale {
  id              String           @id @default(uuid()) @db.Uuid
  status          String           @default("pending")
  customerId      String           @map("customer_id") @db.Uuid
  tenantId        String           @map("tenant_id") @db.Uuid
  discountVariant EDiscountVariant @default(Percentage) @map("discount_variant")
  discountValue   Float            @default(0) @map("discount_value")
  total           Float
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")

  products SaleProduct[]

  customer     Customer       @relation(fields: [customerId], references: [id])
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  PosEventSale PosEventSale[]

  @@map("sales")
}

model SaleProduct {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String   @default("")
  costPrice   Float    @map("cost_price")
  salePrice   Float    @map("sale_price")
  totalQty    Int      @default(0) @map("total_qty")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  saleId    String @map("sale_id") @db.Uuid
  productId String @map("product_id") @db.Uuid

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([saleId, productId])
  @@map("sale_products")
}

model SaleMovement {
  type      ESaleMovementType
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @updatedAt @map(name: "updated_at")

  saleId String @db.Uuid

  @@id([saleId])
  @@map("sale_movements")
}

model SaleMovementPayment {
  id        String                     @id @default(uuid()) @db.Uuid
  method    ESaleMovementPaymentMethod
  amount    Float
  createdAt DateTime                   @default(now()) @map(name: "created_at")
  updatedAt DateTime                   @updatedAt @map(name: "updated_at")

  @@map("sale_movement_payments")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  subject   String
  body      String
  read      Boolean
  tenantId  String   @map("tenant_id") @db.Uuid
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("notifications")
}
