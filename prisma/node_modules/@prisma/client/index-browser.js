
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  houseNumber: 'houseNumber',
  neighborhood: 'neighborhood',
  zipCode: 'zipCode',
  city: 'city',
  state: 'state',
  complement: 'complement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phoneNumber: 'phoneNumber',
  active: 'active',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  number: 'number',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  role: 'role',
  permissions: 'permissions',
  active: 'active',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  subject: 'subject',
  body: 'body',
  href: 'href',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationTargetScalarFieldEnum = {
  id: 'id',
  status: 'status',
  notificationId: 'notificationId',
  userId: 'userId',
  tenantId: 'tenantId'
};

exports.Prisma.PosScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PosEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  posId: 'posId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PosEventEntryScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  description: 'description'
};

exports.Prisma.PosEventOutputScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  description: 'description'
};

exports.Prisma.PosEventSaleScalarFieldEnum = {
  id: 'id',
  description: 'description',
  amount: 'amount',
  discountVariant: 'discountVariant',
  discountValue: 'discountValue',
  customerId: 'customerId',
  saleId: 'saleId'
};

exports.Prisma.PosEventSaleMovementScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  posEventSaleId: 'posEventSaleId'
};

exports.Prisma.PosEventSaleMovementPaymentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PosEventSaleMovementChangeScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PosEventSaleProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  costPrice: 'costPrice',
  salePrice: 'salePrice',
  totalQty: 'totalQty',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  productId: 'productId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  barCode: 'barCode',
  internalCode: 'internalCode',
  active: 'active',
  skuCode: 'skuCode',
  tenantId: 'tenantId',
  salePrice: 'salePrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProductSpecificationScalarFieldEnum = {
  id: 'id',
  label: 'label',
  value: 'value',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  status: 'status',
  internalCode: 'internalCode',
  customerId: 'customerId',
  tenantId: 'tenantId',
  discountVariant: 'discountVariant',
  discountValue: 'discountValue',
  paidTotal: 'paidTotal',
  estimatedTotal: 'estimatedTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SaleMovementScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  saleId: 'saleId'
};

exports.Prisma.SaleMovementPaymentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleMovementChangeScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  costPrice: 'costPrice',
  salePrice: 'salePrice',
  totalQty: 'totalQty',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  saleId: 'saleId',
  productId: 'productId',
  stockLotId: 'stockLotId'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  strategy: 'strategy',
  productId: 'productId',
  totalQty: 'totalQty',
  availableQty: 'availableQty',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  stockId: 'stockId',
  tenantId: 'tenantId',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stockLotId: 'stockLotId'
};

exports.Prisma.StockEventEntryScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  description: 'description'
};

exports.Prisma.StockEventOutputScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  description: 'description'
};

exports.Prisma.StockLotScalarFieldEnum = {
  id: 'id',
  lotNumber: 'lotNumber',
  totalQty: 'totalQty',
  costPrice: 'costPrice',
  stockId: 'stockId',
  tenantId: 'tenantId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantMembershipScalarFieldEnum = {
  membershipId: 'membershipId',
  tenantId: 'tenantId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  active: 'active',
  firstAccess: 'firstAccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTenantSettingsScalarFieldEnum = {
  doNotDisturb: 'doNotDisturb',
  userId: 'userId',
  tenantId: 'tenantId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.DocumentType = exports.$Enums.DocumentType = {
  Cpf: 'Cpf',
  Cnpj: 'Cnpj'
};

exports.EMembershipRole = exports.$Enums.EMembershipRole = {
  Owner: 'Owner'
};

exports.ENotificationType = exports.$Enums.ENotificationType = {
  Info: 'Info',
  Success: 'Success',
  Warning: 'Warning',
  Error: 'Error',
  System: 'System',
  Message: 'Message',
  Reminder: 'Reminder',
  Alert: 'Alert'
};

exports.ENotificationTargetStatus = exports.$Enums.ENotificationTargetStatus = {
  Read: 'Read',
  Unread: 'Unread'
};

exports.EPosStatus = exports.$Enums.EPosStatus = {
  Opened: 'Opened',
  Closed: 'Closed',
  UnderReview: 'UnderReview'
};

exports.EPosEventType = exports.$Enums.EPosEventType = {
  Sale: 'Sale',
  Entry: 'Entry',
  Output: 'Output',
  Payment: 'Payment',
  Return: 'Return',
  Exchange: 'Exchange'
};

exports.EPosEventStatus = exports.$Enums.EPosEventStatus = {
  Processed: 'Processed',
  Canceled: 'Canceled'
};

exports.EDiscountVariant = exports.$Enums.EDiscountVariant = {
  Percentage: 'Percentage',
  Amount: 'Amount'
};

exports.ESaleMovementType = exports.$Enums.ESaleMovementType = {
  Payment: 'Payment',
  Change: 'Change',
  Refund: 'Refund',
  Withdrawal: 'Withdrawal'
};

exports.EPaymentMethod = exports.$Enums.EPaymentMethod = {
  Cash: 'Cash',
  Pix: 'Pix',
  CreditCard: 'CreditCard',
  DebitCard: 'DebitCard'
};

exports.ESaleStatus = exports.$Enums.ESaleStatus = {
  Processed: 'Processed',
  Canceled: 'Canceled'
};

exports.EStockStrategy = exports.$Enums.EStockStrategy = {
  Fifo: 'Fifo',
  Lifo: 'Lifo'
};

exports.EStockEventType = exports.$Enums.EStockEventType = {
  Entry: 'Entry',
  Output: 'Output'
};

exports.Prisma.ModelName = {
  Address: 'Address',
  Customer: 'Customer',
  Document: 'Document',
  Membership: 'Membership',
  Notification: 'Notification',
  NotificationTarget: 'NotificationTarget',
  Pos: 'Pos',
  PosEvent: 'PosEvent',
  PosEventEntry: 'PosEventEntry',
  PosEventOutput: 'PosEventOutput',
  PosEventSale: 'PosEventSale',
  PosEventSaleMovement: 'PosEventSaleMovement',
  PosEventSaleMovementPayment: 'PosEventSaleMovementPayment',
  PosEventSaleMovementChange: 'PosEventSaleMovementChange',
  PosEventSaleProduct: 'PosEventSaleProduct',
  Product: 'Product',
  ProductSpecification: 'ProductSpecification',
  Sale: 'Sale',
  SaleMovement: 'SaleMovement',
  SaleMovementPayment: 'SaleMovementPayment',
  SaleMovementChange: 'SaleMovementChange',
  SaleProduct: 'SaleProduct',
  Stock: 'Stock',
  StockEvent: 'StockEvent',
  StockEventEntry: 'StockEventEntry',
  StockEventOutput: 'StockEventOutput',
  StockLot: 'StockLot',
  Tenant: 'Tenant',
  TenantMembership: 'TenantMembership',
  User: 'User',
  UserTenantSettings: 'UserTenantSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
